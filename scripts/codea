#!/usr/bin/env python

'''Air Codea
Shell interface for the 'Air Code' feature of Codea

Usage:
  codea [-r]
  codea [-r] push <name>
  codea [-r] pull <name>
  codea watch
  codea restart
  codea files

Options:
  -h --help     Show this help
  -r --restart  Restart the project

'''

from ConfigParser import ConfigParser, NoSectionError
from docopt import docopt
from glob import glob
from hashlib import md5
from air_codea import CodeaProject
from os.path import basename

# Watcher event loop stuff
import tty
import termios
from sys import stdin
from time import sleep
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler


# Watches for Lua file changes
class LuaChangeHandler(PatternMatchingEventHandler):
    patterns = ['*.lua']

    def process(self, event):
        fn = basename(event.src_path)[:-4]
        print 'File %s -' % fn,
        text = open(fn + '.lua').read()
        now_hash = md5(text).hexdigest()
        remote_hash, remote_text = cp.get_file(fn)
        try:
            last_hash = cfg.get(fn, 'hash')
        except NoSectionError:
            print 'Unknown state\r'
        else:
            if remote_hash != last_hash:
                print 'Codea version updated\r'
            elif now_hash != last_hash:
                print 'Uploading\r'
                code_hash = cp.upload_file(fn)
                save_hash(fn, code_hash)
            else:
                print 'Unchanged\r'

    def on_created(self, event):
        self.process(event)

args = docopt(__doc__)
cfg = ConfigParser()
cfg.read('.air_codea.cfg')

# I can do **dict(cfg.items('connection')) or similar... but what errors?
ip = cfg.get('connection', 'ip')
port = cfg.get('connection', 'port')
project = cfg.get('connection', 'project')

cp = CodeaProject(ip, port, project)

filename = args['<name>']
if filename is not None and filename.endswith('.lua'):
    filename = filename[:-4]


def save_hash(filename, code_hash):
    if not cfg.has_section(filename):
        cfg.add_section(filename)
    cfg.set(filename, 'hash', code_hash)


# Push
if args['push']:
    if filename in cp.files:
        code_hash = cp.upload_file(filename)
        save_hash(filename, code_hash)
    elif filename == 'all':
        for fn in cp.files:
            print 'File %s - ' % fn,
            text = open(fn + '.lua').read()
            now_hash = md5(text).hexdigest()
            try:
                last_hash = cfg.get(fn, 'hash')
            except NoSectionError:
                print 'Unknown state'
            else:
                if now_hash != last_hash:
                    print 'Uploading'
                    code_hash = cp.upload_file(fn)
                    save_hash(fn, code_hash)
                else:
                    print 'Unchanged'
    else:
        print 'That file is not in the project!'

# Pull
elif args['pull']:
    if filename == 'all':
        for fn in cp.files:
            code_hash = cp.download_file(fn)
            save_hash(fn, code_hash)
    else:
        code_hash = cp.download_file(filename)
        save_hash(filename, code_hash)

elif args['restart']:
    cp.restart()

elif args['files']:
    for f in cp.files:
        print f

# Sync
else:
    local_files = [f[:-4] for f in glob('*.lua')]
    for fn in cp.files:
        print fn, '-',
        # Remote file is not Local
        if fn not in local_files:
            print 'Creating locally'
            save_hash(fn, cp.download_file(fn))
            continue

        # We don't have a hash on file
        try:
            last_hash = cfg.get(fn, 'hash')
        except NoSectionError:
            print 'Unknown state'
            continue

        # Get local details
        local_fn = fn + '.lua'
        local_text = open(local_fn).read()
        local_hash = md5(local_text).hexdigest()

        # We have to download the remote now
        remote_hash, remote_text = cp.get_file(fn)

        # No local changes, might as well download
        if local_hash == last_hash:
            if remote_hash == last_hash:
                print 'No changes'
                continue
            print 'Downloading'
            save_hash(fn, remote_hash)
            open(local_fn, 'w').write(remote_text)
            continue

        # If the remote is unchanged then upload
        if remote_hash == last_hash:
            print 'Uploading'
            save_hash(fn, cp.upload_file(fn))
            continue

        print 'Local and remote changed'

if args['watch']:
    event_handler = LuaChangeHandler()
    observer = Observer()
    observer.schedule(event_handler, '.', recursive=True)
    observer.start()
    stdin_settings = termios.tcgetattr(stdin)
    try:
        while True:
            try:
                tty.setraw(stdin)
                c = stdin.read(1)
            finally:
                termios.tcsetattr(stdin, termios.TCSADRAIN, stdin_settings)
            if c == 'r':
                print 'Restarting'
                cp.restart()
            elif c in ('\x03', 'q'):
                raise KeyboardInterrupt
            else:
                sleep(0.5)
    except KeyboardInterrupt:
        print 'Quitting...'
        observer.stop()
    observer.join()

if args['--restart']:
    print 'Restarting'
    cp.get_file('Main')
    cp.restart()

cfg.write(open('.air_codea.cfg', 'wb'))
